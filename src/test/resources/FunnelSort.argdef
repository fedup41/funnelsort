FunnelSort
-
!
Funnel is a sort / copy / merge utility
com.obdobion.argument.gui.examples
argument[324611074]	-t wildfile -k 'inputFileName' -p -c --camelcaps -h 'The input file or files to be processed.  Wild cards are allowed in the filename only and the path (** indicates multiple path segments).  Sysin is assumed if this parameter is not provided.' -v 'inputFiles' -m '1'
argument[1112193719]	-t file -k o 'outputFileName' -c --camelcaps -h 'The output file to be written.  Sysout is assumed if this parameter is not provided.  The same name as the input file is allowed.' -v 'outputFile'
argument[1032004635]	-t boolean -k r 'replace' -h 'Replace the input file with the results.' -v 'inPlaceSort'
subparser[844827220]	-t begin -k 'headerIn' --camelcaps -h 'Column definitions defining the file header layout.' --class 'com.obdobion.funnel.orderby.KeyPart' --factoryMethod 'com.obdobion.funnel.orderby.KeyType.create' --factoryArgName '--type' -v 'headerInDefs' -m '1'
argument[1756895521]	-t string -k n 'name' -h 'A name for this column / key so that it can be referenced.' -v 'columnName'
argument[2133887363]	-t enum -k t 'type' -p -r -h 'The data type of the key in the file.' --class 'com.obdobion.funnel.orderby.KeyType' -v 'typeName'
argument[1538775426]	-t integer -k o 'offset' -h 'The zero relative offset from the beginning of a row.  This will be computed, if not specified, to be the location of the previous column plus the length of the previous column.  Most often this parameter is not needed.' -d '-1' -v 'offset' --range '0'
argument[836006154]	-t integer -k l 'length' -h 'The length of the key in bytes.' -d '255' -v 'length' --range '1' '255'
argument[420288256]	-t string -k d 'format' -c -h 'The parsing format for converting the contents of the key in the file to an internal representation. Use Java SimpleDateFormat rules for making the format.' -v 'parseFormat'
subparser[844827220]	-t end -k headerIn
subparser[1653270835]	-t begin -k 'headerOut' --camelcaps -h 'Column references defining the output file header layout.' --class 'com.obdobion.funnel.columns.FormatPart' -v 'headerOutDefs' -m '1'
argument[118773545]	-t string -k 'columnName' -p --camelcaps -h 'A previously defined column name.' -v 'columnName'
argument[366623456]	-t enum -k t 'type' -p -c -h 'The data type to be written.  Defaults to the columnIn data type.' -v 'typeName'
argument[1688115788]	-t equ -k e 'equation' --metaphone -h 'Used instead of a column name, this will be evaluated with the result written to the output.' -v 'equation'
argument[857117073]	-t string -k d 'format' -c -h 'The format for converting the contents of the data to be written. Use Java Formatter rules for making the format.  The format must match the type of the data.' -v 'format'
argument[1365783709]	-t integer -k l 'length' -h 'The length of the key in bytes.' -d '255' -v 'length' --range '1' '255'
argument[1960877190]	-t integer -k s 'size' -h 'The number of characters this field will use on output.' -d '255' -v 'size' --range '1' '255'
argument[808039872]	-t integer -k o 'offset' -h 'The zero relative offset from the beginning of a row.  This will be computed, if not specified, to be the location of the previous column plus the length of the previous column.  Most often this parameter is not needed.' -d '-1' -v 'offset' --range '0'
argument[544540019]	-t byte -k f 'filler' -h 'The trailing filler character to use for a short field.' -v 'filler'
subparser[1653270835]	-t end -k headerOut
argument[807997756]	-t integer -k 'fixedIn' --camelcaps -h 'The record length in a fixed record length file.' -v 'fixedRecordLengthIn' --range '1' '4096'
argument[1088270099]	-t integer -k 'fixedOut' --camelcaps -h 'The record length in a fixed record length file.  This is used to change an output file into a fixed format.  It is not necessary if --fixedIn is specified.' -v 'fixedRecordLengthOut' --range '1' '4096'
subparser[1026004349]	-t begin -k 'columnsIn' --camelcaps -h 'Column definitions defining the input file layout.' --class 'com.obdobion.funnel.orderby.KeyPart' --factoryMethod 'com.obdobion.funnel.orderby.KeyType.create' --factoryArgName '--type' -v 'inputColumnDefs' -m '1'
argument[905007415]	-t string -k n 'name' -c -h 'A name for this column / key so that it can be referenced.' -v 'columnName'
argument[1302926916]	-t enum -k t 'type' -p -r -c --class 'com.obdobion.funnel.orderby.KeyType' -v 'typeName'
argument[1621200341]	-t integer -k f 'field' -h 'If this is a CSV file then use this instead of offset and length.  The first field is field #1 (not zero).' -v 'csvFieldNumber' --range '1'
argument[1630298305]	-t integer -k o 'offset' -h 'The zero relative offset from the beginning of a row.  This will be computed, if not specified, to be the location of the previous column plus the length of the previous column.  Most often this parameter is not needed.' -d '-1' -v 'offset' --range '0'
argument[1584131386]	-t integer -k l 'length' -h 'The length of the key in bytes.' -d '255' -v 'length' --range '1' '255'
argument[1534450565]	-t string -k d 'format' -c -h 'The parsing format for converting the contents of the key in the file to an internal representation. Use Java SimpleDateFormat rules for making the format.' -v 'parseFormat'
subparser[1026004349]	-t end -k columnsIn
subparser[928393755]	-t begin -k 'formatOut' --camelcaps -h 'Column references defining the output file layout.' --class 'com.obdobion.funnel.columns.FormatPart' -v 'formatOutDefs' -m '1'
argument[905866840]	-t string -k 'columnName' -p --camelcaps -h 'A previously defined column name.' -v 'columnName'
argument[880625632]	-t equ -k e 'equation' --metaphone -h 'Used instead of a column name, this will be evaluated with the result written to the output.' -v 'equation'
argument[1101077273]	-t enum -k t 'type' -p -h 'The data type to be written.  Defaults to the columnIn data type.' --class 'com.obdobion.funnel.orderby.KeyType' -v 'typeName'
argument[1193404356]	-t string -k d 'format' -c -h 'The format for converting the contents of the data to be written. Use Java Formatter rules for making the format.  The format must match the type of the data.' -v 'format'
argument[32234966]	-t integer -k l 'length' -h 'The length of the key in bytes.' -d '255' -v 'length' --range '1' '255'
argument[1601685580]	-t integer -k s 'size' -h 'The number of characters this field will use on output.' -d '255' -v 'size' --range '1' '255'
argument[373778792]	-t integer -k o 'offset' -h 'The zero relative offset from the beginning of a row.  This will be computed, if not specified, to be the location of the previous column plus the length of the previous column.  Most often this parameter is not needed.' -d '-1' -v 'offset' --range '0'
argument[1586541475]	-t byte -k f 'filler' -h 'The trailing filler character to use for a short field.' -v 'filler'
subparser[928393755]	-t end -k formatOut
argument[21676234]	-t byte -k 'variableOutput' --camelcaps -h 'The byte(s) that end each line in a variable length record file.  This will be used to write the output file as a variable length file.  If this is not specified then the --variableInput value will be used.' -v 'endOfRecordDelimiterOut' -m '1'
argument[1620991239]	-t equ -k w 'where' --metaphone -h 'Rows that evaluate to TRUE are selected for Output.  See \"Algebrain\" for details.  Columns are used as variables in this Algebrain equation.' -v 'whereEqu' -m '1'
argument[1304388693]	-t equ -k s 'stopWhen' --camelcaps --metaphone -h 'The sort will stop reading input when this equation returns TRUE.  See \"Algebrain\" for details.  Columns are used as variables in this Algebrain equation.' -v 'stopEqu' -m '1'
argument[384424938]	-t byte -k 'variableInput' --camelcaps -h 'The byte(s) that end each line in a variable length record file.' -d cr lf -v 'endOfRecordDelimiterIn' -m '1'
argument[1106384237]	-t enum -k d 'duplicate' -h 'Special handling of duplicate keyed rows.' -d 'original' --class 'com.obdobion.funnel.parameters.DuplicateDisposition' -v 'duplicateDisposition'
argument[1402347057]	-t enum -k c 'copy' -h 'Defines the process that will take place on the input.' -d 'bykey' --class 'com.obdobion.funnel.parameters.CopyOrder' -v 'copyOrder'
argument[1698518490]	-t long -k 'rowMax' --camelcaps -h 'Used for variable length input, estimate the number of rows.  Too low could cause problems.' -d '9223372036854775807' -v 'maximumNumberOfRows' --range '2'
subparser[1037300764]	-t begin -k 'orderBy' --camelcaps -h 'The sort keys defined from columns.' --class 'com.obdobion.funnel.parameters.OrderBy' -v 'orderBys' -m '1'
argument[1826346934]	-t string -k 'columnName' -p -r --camelcaps -h 'A previously defined column name.' -v 'columnName'
argument[266283914]	-t enum -k d 'direction' -p -h 'The direction of the sort for this key. AASC and ADESC are absolute values of the key - the case of letters would not matter and the sign of numbers would not matter.' -d 'asc' --class 'com.obdobion.funnel.orderby.KeyDirection' -v 'direction'
subparser[1037300764]	-t end -k orderBy
subparser[4406318]	-t begin -k 'hexDump' --camelcaps -h 'Columns that will be shown in hex format.' --class 'com.obdobion.funnel.parameters.HexDump' -v 'hexDumps' -m '1'
argument[580016942]	-t string -k 'columnName' -p --camelcaps -h 'A previously defined column name.' -v 'columnName'
subparser[4406318]	-t end -k hexDump
subparser[273043117]	-t begin -k 'count' -h 'Count the number of records per unique sort key' --class 'com.obdobion.funnel.aggregation.Aggregate' --factoryMethod 'com.obdobion.funnel.aggregation.Aggregate.newCount' -v 'aggregates' -m '1'
argument[1714664532]	-t string -k n 'name' -r -h 'A name for this aggregate so that it can be referenced.' -v 'name'
subparser[273043117]	-t end -k count
subparser[2139637488]	-t begin -k 'avg' -h 'A list of columns that will be analyzed for their respective average values per unique sort key.' --class 'com.obdobion.funnel.aggregation.Aggregate' --factoryMethod 'com.obdobion.funnel.aggregation.Aggregate.newAvg' -v 'aggregates' -m '1'
argument[1341339908]	-t string -k 'columnName' -p --camelcaps -h 'A previously defined column name.' -v 'columnName'
argument[1843541361]	-t string -k n 'name' -r -h 'A name for this aggregate so that it can be referenced.' -v 'name'
argument[369667469]	-t equ -k e 'equation' --metaphone -h 'Used instead of a column name.' -v 'equation'
subparser[2139637488]	-t end -k avg
subparser[722126458]	-t begin -k 'max' -h 'A list of columns that will be analyzed for their respective maximum values per unique sort key.' --class 'com.obdobion.funnel.aggregation.Aggregate' --factoryMethod 'com.obdobion.funnel.aggregation.Aggregate.newMax' -v 'aggregates' -m '1'
argument[2103959814]	-t string -k 'columnName' -p --camelcaps -h 'A previously defined column name.' -v 'columnName'
argument[30546534]	-t string -k n 'name' -r -h 'A name for this aggregate so that it can be referenced.' -v 'name'
argument[1382394644]	-t equ -k e 'equation' --metaphone -h 'Used instead of a column name.' -v 'equation'
subparser[722126458]	-t end -k max
subparser[790728244]	-t begin -k 'min' -h 'A list of columns that will be analyzed for their respective minimum values per unique sort key.' --class 'com.obdobion.funnel.aggregation.Aggregate' --factoryMethod 'com.obdobion.funnel.aggregation.Aggregate.newMin' -v 'aggregates' -m '1'
argument[1829516551]	-t string -k 'columnName' -p --camelcaps -h 'A previously defined column name.' -v 'columnName'
argument[2082214890]	-t string -k n 'name' -r -h 'A name for this aggregate so that it can be referenced.' -v 'name'
argument[56502902]	-t equ -k e 'equation' --metaphone -h 'Used instead of a column name.' -v 'equation'
subparser[790728244]	-t end -k min
subparser[539841543]	-t begin -k 'sum' -h 'A list of columns that will be analyzed for their respective summary values per unique sort key.' --class 'com.obdobion.funnel.aggregation.Aggregate' --factoryMethod 'com.obdobion.funnel.aggregation.Aggregate.newSum' -v 'aggregates' -m '1'
argument[746977544]	-t string -k 'columnName' -p --camelcaps -h 'A previously defined column name.' -v 'columnName'
argument[815414321]	-t string -k n 'name' -r -h 'A name for this aggregate so that it can be referenced.' -v 'name'
argument[1113963982]	-t equ -k e 'equation' --metaphone -h 'Used instead of a column name.' -v 'equation'
subparser[539841543]	-t end -k sum
subparser[144856297]	-t begin -k 'csv' -h 'The definition of the CSV file being read as input.  Using this indicates that the input is in fact a CSV file and the columns parameter must use the --field arguments.' --class 'com.obdobion.funnel.parameters.CSVDef' -v 'csv'
argument[200057164]	-t enum -k f -p -c -h 'A predefined way to parse the CSV input.  Other parameters may override the specifics of this definition.' -d 'Default' --class 'org.apache.commons.csv.CSVFormat' -v 'predefinedFormat' --enumlist 'org.apache.commons.csv.CSVFormat'
argument[1794535348]	-t boolean -k h 'header' -h 'Skip over the first line for sorting and just write it to the beginning of the output file.' -v 'header'
argument[85075177]	-t byte -k c 'commentMarker' --camelcaps -h 'Sets the comment start marker of the format to the specified character. Note that the comment start character is only recognized at the start of a line.' -v 'commentMarker'
argument[520961470]	-t byte -k d 'delimiter' -h 'Sets the delimiter of the format to the specified character.' -v 'delimiter'
argument[1904548306]	-t byte -k x 'escape' -h 'Sets the escape character of the format to the specified character.' -v 'escape'
argument[685200281]	-t boolean -k e 'ignoreEmptyLines' --camelcaps -h 'Sets the empty line skipping behavior of the format to true.' -v 'ignoreEmptyLines'
argument[1014374150]	-t boolean -k s 'ignoreSurroundingSpaces' --camelcaps -h 'Sets the trimming behavior of the format to true.' -v 'ignoreSurroundingSpaces'
argument[1256207867]	-t string -k n 'nullString' --camelcaps -h 'Converts strings equal to the given nullString to null when reading records.' -v 'nullString'
argument[334692092]	-t byte -k q 'quote' -h 'Sets the quoteChar of the format to the specified character.' -v 'quote'
subparser[144856297]	-t end -k csv
argument[27995264]	-t file -k 'workDirectory' -c --camelcaps -h 'The directory where temp files will be handled.' -v 'workDirectory'
argument[229215644]	-t boolean -k 'noCacheInput' --camelcaps -h 'Caching the input file into memory is faster.  This will turn off the feature.' -v 'noCacheInput'
argument[1185758783]	-t boolean -k 'diskWork' --camelcaps -h 'Work files are stored on disk.  The amount of memory required to hold work areas in memory is about (2 * (keySize + 24)).' -v 'diskWork'
argument[1110195464]	-t integer -k 'power' -h 'The depth of the funnel.  The bigger this number is, the more memory will be used.  This is computed when --max or -f is specified.' -d '16' -v 'depth' --range '2' '16'
argument[448517857]	-t boolean -k 'syntaxOnly' --camelcaps -h 'Check the command - will not run' -v 'syntaxOnly'
argument[1539276103]	-t boolean -k 'version' -h 'Display the version of FunnelSort' -v 'version'
