-n'FunnelSort' --prefix - --notPrefix ! -h'Funnel is a sort / copy / merge utility ' -p'com.obdobion.funnel.parameters'
 1	--uid 1 -t wildfile -k 'inputFileName' -p -c --camelcaps -h 'The input file or files to be processed.  Wild cards are allowed in the filename only and the path (** indicates multiple path segments).  Sysin is assumed if this parameter is not provided.' -v 'inputFiles' -m '1'
 2	--uid 2 -t file -k o 'outputFileName' -c --camelcaps -h 'The output file to be written.  Sysout is assumed if this parameter is not provided.  The same name as the input file is allowed.' -v 'outputFile'
 3	--uid 3 -t boolean -k r 'replace' -h 'Replace the input file with the results.' -v 'inPlaceSort'
 4	--uid 4 -t begin -k 'headerIn' --camelcaps -h 'Column definitions defining the file header layout.' --class 'com.obdobion.funnel.orderby.KeyPart' --factoryMethod 'com.obdobion.funnel.orderby.KeyType.create' --factoryArgName '--type' -v 'headerInDefs' -m '1'
 5	--uid 5 -t string -k n 'name' -h 'A name for this column / key so that it can be referenced.' -v 'columnName'
 6	--uid 6 -t enum -k t 'type' -p -r -h 'The data type of the key in the file.' --class 'com.obdobion.funnel.orderby.KeyType' -v 'typeName'
 7	--uid 7 -t integer -k o 'offset' -h 'The zero relative offset from the beginning of a row.  This will be computed, if not specified, to be the location of the previous column plus the length of the previous column.  Most often this parameter is not needed.' -d '-1' -v 'offset' --range '0'
 8	--uid 8 -t integer -k l 'length' -h 'The length of the key in bytes.' -d '255' -v 'length' --range '1' '255'
 9	--uid 9 -t string -k d 'format' -c -h 'The parsing format for converting the contents of the key in the file to an internal representation. Use Java SimpleDateFormat rules for making the format.' -v 'parseFormat'
 4	--uid 4 -t end -k headerIn
 11	--uid 11 -t begin -k 'headerOut' --camelcaps -h 'Column references defining the output file header layout.' --class 'com.obdobion.funnel.columns.FormatPart' -v 'headerOutDefs' -m '1'
 12	--uid 12 -t string -k 'columnName' -p --camelcaps -h 'A previously defined column name.' -v 'columnName'
 13	--uid 13 -t enum -k t 'type' -p -c -h 'The data type to be written.  Defaults to the columnIn data type.' -v 'typeName'
 14	--uid 14 -t equ -k e 'equation' --metaphone -h 'Used instead of a column name, this will be evaluated with the result written to the output.' -v 'equation'
 15	--uid 15 -t string -k d 'format' -c -h 'The format for converting the contents of the data to be written. Use Java Formatter rules for making the format.  The format must match the type of the data.' -v 'format'
 16	--uid 16 -t integer -k l 'length' -h 'The length of the key in bytes.' -d '255' -v 'length' --range '1' '255'
 17	--uid 17 -t integer -k s 'size' -h 'The number of characters this field will use on output.' -d '255' -v 'size' --range '1' '255'
 18	--uid 18 -t integer -k o 'offset' -h 'The zero relative offset from the beginning of a row.  This will be computed, if not specified, to be the location of the previous column plus the length of the previous column.  Most often this parameter is not needed.' -d '-1' -v 'offset' --range '0'
 19	--uid 19 -t byte -k f 'filler' -h 'The trailing filler character to use for a short field.' -v 'filler'
 11	--uid 11 -t end -k headerOut
 21	--uid 21 -t integer -k 'fixedIn' --camelcaps -h 'The record length in a fixed record length file.' -v 'fixedRecordLengthIn' --range '1' '4096'
 22	--uid 22 -t integer -k 'fixedOut' -h 'The record length in a fixed record length file.  This is used to change an output file into a fixed format.  It is not necessary if --fixedIn is specified.' -v 'fixedRecordLengthOut' --range '1' '4096'
 23	--uid 23 -t begin -k 'columnsIn' --camelcaps -h 'Column definitions defining the input file layout.' --class 'com.obdobion.funnel.orderby.KeyPart' --factoryMethod 'com.obdobion.funnel.orderby.KeyType.create' --factoryArgName '--type' -v 'inputColumnDefs' -m '1'
 24	--uid 24 -t string -k n 'name' -c -h 'A name for this column / key so that it can be referenced.' -v 'columnName'
 25	--uid 25 -t enum -k t 'type' -p -r -c --class 'com.obdobion.funnel.orderby.KeyType' -v 'typeName'
 26	--uid 26 -t integer -k f 'field' -h 'If this is a CSV file then use this instead of offset and length.  The first field is field #1 (not zero).' -v 'csvFieldNumber' --range '1'
 27	--uid 27 -t integer -k o 'offset' -h 'The zero relative offset from the beginning of a row.  This will be computed, if not specified, to be the location of the previous column plus the length of the previous column.  Most often this parameter is not needed.' -d '-1' -v 'offset' --range '0'
 28	--uid 28 -t integer -k l 'length' -h 'The length of the key in bytes.' -d '255' -v 'length' --range '1' '255'
 29	--uid 29 -t string -k d 'format' -c -h 'The parsing format for converting the contents of the key in the file to an internal representation. Use Java SimpleDateFormat rules for making the format.' -v 'parseFormat'
 23	--uid 23 -t end -k columnsIn
 31	--uid 31 -t begin -k 'formatOut' --camelcaps -h 'Column references defining the output file layout.' --class 'com.obdobion.funnel.columns.FormatPart' -v 'formatOutDefs' -m '1'
 32	--uid 32 -t string -k 'columnName' -p --camelcaps -h 'A previously defined column name.' -v 'columnName'
 33	--uid 33 -t equ -k e 'equation' --metaphone -h 'Used instead of a column name, this will be evaluated with the result written to the output.' -v 'equation'
 34	--uid 34 -t enum -k t 'type' -p -h 'The data type to be written.  Defaults to the columnIn data type.' --class 'com.obdobion.funnel.orderby.KeyType' -v 'typeName'
 35	--uid 35 -t string -k d 'format' -c -h 'The format for converting the contents of the data to be written. Use Java Formatter rules for making the format.  The format must match the type of the data.' -v 'format'
 36	--uid 36 -t integer -k l 'length' -h 'The length of the key in bytes.' -d '255' -v 'length' --range '1' '255'
 37	--uid 37 -t integer -k s 'size' -h 'The number of characters this field will use on output.' -d '255' -v 'size' --range '1' '255'
 38	--uid 38 -t integer -k o 'offset' -h 'The zero relative offset from the beginning of a row.  This will be computed, if not specified, to be the location of the previous column plus the length of the previous column.  Most often this parameter is not needed.' -d '-1' -v 'offset' --range '0'
 39	--uid 39 -t byte -k f 'filler' -h 'The trailing filler character to use for a short field.' -v 'filler'
 31	--uid 31 -t end -k formatOut
 41	--uid 41 -t byte -k 'variableOutput' --camelcaps -h 'The byte(s) that end each line in a variable length record file.  This will be used to write the output file as a variable length file.  If this is not specified then the --variableInput value will be used.' -v 'endOfRecordDelimiterOut' -m '1'
 42	--uid 42 -t equ -k w 'where' --metaphone -h 'Rows that evaluate to TRUE are selected for Output.  See \\\"Algebrain\\\" for details.  Columns are used as variables in this Algebrain equation.' -v 'whereEqu' -m '1'
 43	--uid 43 -t equ -k s 'stopWhen' --camelcaps --metaphone -h 'The sort will stop reading input when this equation returns TRUE.  See \\\"Algebrain\\\" for details.  Columns are used as variables in this Algebrain equation.' -v 'stopEqu' -m '1'
 44	--uid 44 -t byte -k 'variableInput' --camelcaps -h 'The byte(s) that end each line in a variable length record file.' -d cr lf -v 'endOfRecordDelimiterIn' -m '1'
 45	--uid 45 -t enum -k d 'duplicate' -h 'Special handling of duplicate keyed rows.' -d 'original' --class 'com.obdobion.funnel.parameters.DuplicateDisposition' -v 'duplicateDisposition'
 46	--uid 46 -t enum -k c 'copy' -h 'Defines the process that will take place on the input.' -d 'bykey' --class 'com.obdobion.funnel.parameters.CopyOrder' -v 'copyOrder'
 47	--uid 47 -t long -k 'rowMax' --camelcaps -h 'Used for variable length input, estimate the number of rows.  Too low could cause problems.' -d '9223372036854775807' -v 'maximumNumberOfRows' --range '2'
 48	--uid 48 -t begin -k 'orderBy' --camelcaps -h 'The sort keys defined from columns.' --class 'com.obdobion.funnel.parameters.OrderBy' -v 'orderBys' -m '1'
 49	--uid 49 -t string -k 'columnName' -p -r --camelcaps -h 'A previously defined column name.' -v 'columnName'
 50	--uid 50 -t enum -k d 'direction' -p -h 'The direction of the sort for this key. AASC and ADESC are absolute values of the key - the case of letters would not matter and the sign of numbers would not matter.' -d 'asc' --class 'com.obdobion.funnel.orderby.KeyDirection' -v 'direction'
 48	--uid 48 -t end -k orderBy
 52	--uid 52 -t begin -k 'hexDump' --camelcaps -h 'Columns that will be shown in hex format.' --class 'com.obdobion.funnel.parameters.HexDump' -v 'hexDumps' -m '1'
 53	--uid 53 -t string -k 'columnName' -p --camelcaps -h 'A previously defined column name.' -v 'columnName'
 52	--uid 52 -t end -k hexDump
 55	--uid 55 -t begin -k 'count' -h 'Count the number of records per unique sort key' --class 'com.obdobion.funnel.aggregation.Aggregate' --factoryMethod 'com.obdobion.funnel.aggregation.Aggregate.newCount' -v 'aggregates' -m '1'
 56	--uid 56 -t string -k n 'name' -r -h 'A name for this aggregate so that it can be referenced.' -v 'name'
 55	--uid 55 -t end -k count
 58	--uid 58 -t begin -k 'avg' -h 'A list of columns that will be analyzed for their respective average values per unique sort key.' --class 'com.obdobion.funnel.aggregation.Aggregate' --factoryMethod 'com.obdobion.funnel.aggregation.Aggregate.newAvg' -v 'aggregates' -m '1'
 59	--uid 59 -t string -k 'columnName' -p --camelcaps -h 'A previously defined column name.' -v 'columnName'
 60	--uid 60 -t string -k n 'name' -r -h 'A name for this aggregate so that it can be referenced.' -v 'name'
 61	--uid 61 -t equ -k e 'equation' --metaphone -h 'Used instead of a column name.' -v 'equation'
 58	--uid 58 -t end -k avg
 62	--uid 62 -t begin -k 'max' -h 'A list of columns that will be analyzed for their respective maximum values per unique sort key.' --class 'com.obdobion.funnel.aggregation.Aggregate' --factoryMethod 'com.obdobion.funnel.aggregation.Aggregate.newMax' -v 'aggregates' -m '1'
 63	--uid 63 -t string -k 'columnName' -p --camelcaps -h 'A previously defined column name.' -v 'columnName'
 64	--uid 64 -t string -k n 'name' -r -h 'A name for this aggregate so that it can be referenced.' -v 'name'
 65	--uid 65 -t equ -k e 'equation' --metaphone -h 'Used instead of a column name.' -v 'equation'
 62	--uid 62 -t end -k max
 67	--uid 67 -t begin -k 'min' -h 'A list of columns that will be analyzed for their respective minimum values per unique sort key.' --class 'com.obdobion.funnel.aggregation.Aggregate' --factoryMethod 'com.obdobion.funnel.aggregation.Aggregate.newMin' -v 'aggregates' -m '1'
 68	--uid 68 -t string -k 'columnName' -p --camelcaps -h 'A previously defined column name.' -v 'columnName'
 69	--uid 69 -t string -k n 'name' -r -h 'A name for this aggregate so that it can be referenced.' -v 'name'
 70	--uid 70 -t equ -k e 'equation' --metaphone -h 'Used instead of a column name.' -v 'equation'
 67	--uid 67 -t end -k min
 72	--uid 72 -t begin -k 'sum' -h 'A list of columns that will be analyzed for their respective summary values per unique sort key.' --class 'com.obdobion.funnel.aggregation.Aggregate' --factoryMethod 'com.obdobion.funnel.aggregation.Aggregate.newSum' -v 'aggregates' -m '1'
 73	--uid 73 -t string -k 'columnName' -p --camelcaps -h 'A previously defined column name.' -v 'columnName'
 74	--uid 74 -t string -k n 'name' -r -h 'A name for this aggregate so that it can be referenced.' -v 'name'
 75	--uid 75 -t equ -k e 'equation' --metaphone -h 'Used instead of a column name.' -v 'equation'
 72	--uid 72 -t end -k sum
 77	--uid 77 -t begin -k 'csv' -h 'The definition of the CSV file being read as input.  Using this indicates that the input is in fact a CSV file and the columns parameter must use the --field arguments.' --class 'com.obdobion.funnel.parameters.CSVDef' -v 'csv'
 78	--uid 78 -t enum -k f -p -c -h 'A predefined way to parse the CSV input.  Other parameters may override the specifics of this definition.' -d 'Default' --class 'org.apache.commons.csv.CSVFormat' -v 'predefinedFormat' --enumlist 'org.apache.commons.csv.CSVFormat'
 79	--uid 79 -t boolean -k h 'header' -h 'Skip over the first line for sorting and just write it to the beginning of the output file.' -v 'header'
 80	--uid 80 -t byte -k c 'commentMarker' --camelcaps -h 'Sets the comment start marker of the format to the specified character. Note that the comment start character is only recognized at the start of a line.' -v 'commentMarker'
 81	--uid 81 -t byte -k d 'delimiter' -h 'Sets the delimiter of the format to the specified character.' -v 'delimiter'
 82	--uid 82 -t byte -k x 'escape' -h 'Sets the escape character of the format to the specified character.' -v 'escape'
 83	--uid 83 -t boolean -k e 'ignoreEmptyLines' --camelcaps -h 'Sets the empty line skipping behavior of the format to true.' -v 'ignoreEmptyLines'
 84	--uid 84 -t boolean -k s 'ignoreSurroundingSpaces' --camelcaps -h 'Sets the trimming behavior of the format to true.' -v 'ignoreSurroundingSpaces'
 85	--uid 85 -t string -k n 'nullString' --camelcaps -h 'Converts strings equal to the given nullString to null when reading records.' -v 'nullString'
 86	--uid 86 -t byte -k q 'quote' -h 'Sets the quoteChar of the format to the specified character.' -v 'quote'
 77	--uid 77 -t end -k csv
 88	--uid 88 -t file -k 'workDirectory' -c --camelcaps -h 'The directory where temp files will be handled.' -v 'workDirectory'
 89	--uid 89 -t boolean -k 'noCacheInput' --camelcaps -h 'Caching the input file into memory is faster.  This will turn off the feature.' -v 'noCacheInput'
 90	--uid 90 -t boolean -k 'diskWork' --camelcaps -h 'Work files are stored on disk.  The amount of memory required to hold work areas in memory is about (2 * (keySize + 24)).' -v 'diskWork'
 91	--uid 91 -t integer -k 'power' -h 'The depth of the funnel.  The bigger this number is, the more memory will be used.  This is computed when --max or -f is specified.' -d '16' -v 'depth' --range '2' '16'
 92	--uid 92 -t boolean -k 'syntaxOnly' --camelcaps -h 'Check the command - will not run' -v 'syntaxOnly'
 93	--uid 93 -t boolean -k 'version' -c -h 'Display the version of FunnelSort' -v 'version'
